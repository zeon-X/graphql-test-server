[
    {
        "_id": "61e9ba20f9b58155162dbf52",
        "type": "trigger",
        "name": "Predefined Triggers",
        "schema": {
            "title": "Predefined Triggers",
            "type": "object",
            "properties": {
                "GroupedTriggers": {
                    "title": "Grouped Triggers",
                    "description": "Grouped Triggers includes any text, any payload and any comment",
                    "type": "object",
                    "properties": {
                        "Input": {
                            "title": "Any User Input",
                            "type": "boolean"
                        }
                    }
                },
                "IndividualTriggers": {
                    "title": "Individual Triggers",
                    "description": "One or more than one triggers can be selected",
                    "type": "object",
                    "properties": {
                        "Text": {
                            "title": "Any Text",
                            "type": "boolean"
                        },
                        "Payload": {
                            "title": "Any Payload",
                            "type": "boolean"
                        },
                        "Comment": {
                            "title": "Any Comment",
                            "type": "boolean"
                        },
                        "Number": {
                            "title": "Any Number",
                            "type": "boolean"
                        },
                        "Email": {
                            "title": "Any Email",
                            "type": "boolean"
                        },
                        "Media/File": {
                            "title": "Any Media/File",
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "integrationId": "woztell-essential-pack",
        "functionString": "const me = this.messageEvent\nconst it = this.params?.IndividualTriggers\nconst gt = this.params?.GroupedTriggers\nif (!me || (!it && !gt)) {\n  return false\n}\nif (gt?.Input && ![\"READ\", \"DELIVERED\", \"FAILED\", \"SENT\", \"DELETED\"].includes(me.type) && me.__source__ !== \"INCOMING_WEBHOOK\") {\n  return true\n}\nif (it?.Text && me.type === \"TEXT\") {\n  return true\n}\nif (it?.Payload && me.type === \"PAYLOAD\") {\n  return true\n}\nif (it?.Comment && me.type === \"COMMENT\") {\n  return true\n}\nif (it?.[\"Media/File\"] && (me.type === \"MISC\" || me.fileType)) {\n  return true\n}\nif (it?.Email && me.type === \"TEXT\" && /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(me.data.text)) {\n  return true\n}\nif (it?.Number && me.type === \"TEXT\" && /^[0-9]+$/.test(me.data.text)) {\n  return true\n}\nreturn false\n",
        "key": "predefined-trigger",
        "updatedAt": 1727122901547
    },
    {
        "_id": "61e9ba20f9b581f25a2dbf51",
        "type": "trigger",
        "name": "Keyword / Payload",
        "description": "Use keyword or payload as triggers",
        "schema": {
            "title": "Keyword Payload Template",
            "type": "object",
            "default": {
                "keywords": [],
                "payloads": null
            },
            "properties": {
                "payloads": {
                    "title": "Payloads",
                    "ui:type": "creatableTemplate",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "uniqueItems": true
                },
                "keywords": {
                    "title": "Keywords Groups",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "default": {
                            "caseSensitive": false,
                            "keyword": []
                        },
                        "properties": {
                            "keyword": {
                                "title": "Keywords",
                                "type": "array",
                                "ui:type": "creatableTemplate",
                                "items": {
                                    "type": "string",
                                    "default": ""
                                }
                            },
                            "caseSensitive": {
                                "title": "Case Sensitive",
                                "type": "boolean"
                            },
                            "wordBoundary": {
                                "title": "Word Boundary",
                                "ui:tooltipText": "For example, you have toggled this condition and set \"hi\". When user types \"high\" (even though \"high\" contains the alphabets \"hi\", it is not an individual word of \"hi\".), the tree node can not be triggered. When user types a sentence containing an individual word of \"hi\" (i.e. hi, this is Stella!), the tree node can be triggered.",
                                "type": "boolean"
                            },
                            "equal": {
                                "title": "Equal",
                                "ui:tooltipText": "The Text String must be completely equal for the trigger to occur. If the trigger is set to \"Hello\", then only \"Hello\" will trigger the logic. \"Hello World\" and even \"hello\" will not work. NOTE: If Equal is set to true, Word Boundary and Case Sensitive is not used.",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "keyword",
                            "caseSensitive"
                        ]
                    }
                }
            },
            "minProperties": 1.0
        },
        "integrationId": "woztell-essential-pack",
        "functionString": "let passed = false\nlet failed = false\nconst params = this.params\nconst me = this.messageEvent\n\nfunction escapeRegExp(text) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")\n}\n\nif (!params || !me) {\n  return false\n}\n\nif (params.keywords && params.keywords.length && me.type === \"TEXT\") {\n  params.keywords.forEach((element) => {\n    if (element.keyword && element.keyword.length) {\n      let regex = \"\"\n      let i = \"i\"\n      if (element.equal) {\n        let equal = false\n        element.keyword.forEach((element2) => {\n          if (me.data.text === element2) {\n            equal = true\n          }\n        })\n        if (equal) {\n          passed = true\n        } else {\n          failed = true\n        }\n      } else {\n        element.keyword.forEach((element2) => {\n          if (element.wordBoundary) {\n            if (regex.length) {\n              regex = `${regex}|\\\\b${escapeRegExp(element2)}\\\\b`\n            } else {\n              regex = `\\\\b${escapeRegExp(element2)}\\\\b`\n            }\n          } else if (regex.length) {\n            regex = `${regex}|${escapeRegExp(element2)}`\n          } else {\n            regex = `${escapeRegExp(element2)}`\n          }\n        })\n        if (element.caseSensitive) {\n          i = \"\"\n        }\n        regex = new RegExp(regex, `${i}`)\n        if (regex.test(me.data.text)) {\n          passed = true\n        } else {\n          failed = true\n        }\n      }\n    }\n  })\n}\nif (params.payloads && params.payloads.length && me.type === \"PAYLOAD\") {\n  if (me.type === \"PAYLOAD\") {\n    params.payloads.forEach((element) => {\n      if (element === me.data.payload) {\n        passed = true\n      }\n    })\n  }\n}\nreturn passed && !failed",
        "key": "keyword-payload",
        "updatedAt": 1727122901548
    },
    {
        "_id": "62cfc19bf4573e1b32ca2295",
        "type": "action",
        "name": "Send Email",
        "integrationId": "email",
        "functionString": "return new Promise(async (resolve, reject) => {\r\n  try {\r\n    const _ = require(\"lodash\")\r\n    const { sendEmail } = require(\"email/1.0.0\")\r\n\r\n    const from = _.get(this.params, \"from\")\r\n    const to = _.get(this.params, \"to\")\r\n    const cc = _.get(this.params, \"cc\")\r\n    const bcc = _.get(this.params, \"bcc\")\r\n    const subject = _.get(this.params, \"subject\")\r\n    const text = _.get(this.params, \"text\")\r\n    const html = _.get(this.params, \"html\")\r\n    const attachments = _.get(this.params, \"attachments\")\r\n    const amp = _.get(this.params, \"amp\")\r\n    await sendEmail({\r\n      from,\r\n      to,\r\n      cc,\r\n      bcc,\r\n      subject,\r\n      text,\r\n      html,\r\n      attachments,\r\n      amp,\r\n    })\r\n    resolve()\r\n  } catch (e) {\r\n    console.error(\"[Email Module Error]\", e)\r\n    reject(e)\r\n  }\r\n})",
        "schema": {
            "type": "object",
            "title": "Send Email",
            "properties": {
                "from": {
                    "type": "string",
                    "title": "From address"
                },
                "to": {
                    "type": "string",
                    "title": "To address"
                },
                "cc": {
                    "type": "string",
                    "title": "CC address"
                },
                "bcc": {
                    "type": "string",
                    "title": "BCC address"
                },
                "subject": {
                    "type": "string",
                    "title": "Subject",
                    "ui:type": "textTemplate"
                },
                "text": {
                    "type": "string",
                    "title": "Text",
                    "ui:type": "textTemplate",
                    "description": "This will be used as fallback text when HTML is applied."
                },
                "html": {
                    "type": "string",
                    "title": "HTML",
                    "ui:type": "code",
                    "ui:multiLine": true,
                    "ui:rows": 4.0
                },
                "attachments": {
                    "type": "array",
                    "title": "Attachments",
                    "maxItems": 10.0,
                    "items": {
                        "type": "object",
                        "title": "Attachment",
                        "properties": {
                            "path": {
                                "type": "string",
                                "title": "URL",
                                "ui:type": "mediaUrl"
                            }
                        }
                    }
                },
                "amp": {
                    "type": "string",
                    "title": "AMP",
                    "ui:hidden": true,
                    "ui:multiLine": true,
                    "ui:rows": 4.0
                }
            }
        },
        "requestedVerification": false,
        "verified": true,
        "published": true,
        "createdAt": 1654758039590
    }
]